[project]
name = "mkdocforge"
version = "0.1.0"
description = "MkDocs Documentation Platform with Advanced Features"
authors = [ { name = "Mdevpro78", email = "mdevpro.2020@gmail.com" } ]
readme = "README.md"
requires-python = ">= 3.11"
license = { text = "MIT" }
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]

# Core dependencies used by the package itself
dependencies = [
  # Core dependencies would go here
]

  # === PEP 621 Standard Optional Dependencies ===
  [project.optional-dependencies]
  # Testing tools and frameworks
  test = [
    "tox>=4.24.2",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.1",
  ]

  # Documentation generation tools
  docs = [
    # MkDocs core and themes
    "mkdocs-material>=9.6.8",
    "mkapi>=4.1.0",
    "pymdown-extensions>=10.14.3",
    # MkDocs plugins
    "mkdocs-puml>=2.3.0",
    "mkdocs-include-markdown-plugin[cache]>=7.1.5",
    "mdx-include>=1.4.2",
    "mkdocs-awesome-pages-plugin>=2.10.1",
    "mkdoxy>=1.2.7",
    "mkdocs-meta-descriptions-plugin>=4.0.0",
    "mkdocs-markdownextradata-plugin>=0.2.6",
    "mkdocstrings>=0.29.0",
    "mkdocstrings-python>=1.16.5",
    "mkdocs-macros-plugin>=1.3.7",
    "mkdocs-macros-includex>=0.0.6",
    "mkdocs-redirects>=1.2.2",
    "mkdocs-minify-plugin>=0.8.0",
    "mkapi>=4.1.0",
    "pymdown-extensions>=10.14.3",
    "mkdocs-git-revision-date-localized-plugin>=1.4.5",
    "mike>=2.1.3",
    "neoteroi-mkdocs>=1.1.0",
    "mkdocs-material-adr>=1.1.2",
    "mkdocs-section-index>=0.3.9",
    "mkdocs-version-annotations>=1.0.0",
    "mdx-include>=1.4.2",
    "mkdoxy>=1.2.7",
    # Python API documentation
    "mkdocstrings>=0.29.0",
    "mkdocstrings-python>=1.16.5",
    "griffe-typingdoc>=0.2.8",
    "pymarkdownlnt>=0.9.29",
    "mkdocs-material-extensions>=1.3.1",
    "mkdocs-glightbox>=0.4.0",
  ]

  # Code quality and formatting tools
  lint = [
    "pre-commit>=4.1.0",
    "mypy>=1.15.0",
    "ruff>=0.10.0",
    "black>=25.1.0",
    "types-requests>=2.32.0.20250306",
    "mdformat>=0.7.22",
    "validate-pyproject[all]>=0.24",
    "pyupgrade>=3.19.1",
    "openapi-spec-validator>=0.7.1",
    "add-trailing-comma>=3.1.0",
    "bashate>=2.1.1",
    "safety>=3.3.1",
    "commitizen>=4.4.1",
    "yamllint>=1.36.0",
    "uv-audit>=0.1.9",
    "mdformat-gfm>=0.4.1",
    "mdformat-mkdocs>=4.1.2",
    "mdformat-frontmatter>=2.0.8",
    "mdformat-footnote>=0.1.1",
    "mdformat-tables>=1.0.0",
    "mdformat-toc>=0.3.0",
    "mdformat-beautysh>=0.1.1",
    "mdformat-black>=0.1.1",
    "mdformat-gfm-alerts>=1.0.1",
    "mdformat-myst>=0.2.1",
    "mdformat-config>=0.2.1",
    "mdformat-ruff>=0.1.3",
    "mdformat-web>=0.2.0",
    "mdformat-simple-breaks>=0.0.1",
  ]

  # Development environment - combines all extras for convenience
  dev = [
    # Include all groups via references instead of duplicating
    "mkdocforge[test,docs,lint]",
    "hatch>=1.14.0",
    "python-semantic-release>=9.21.0",
  ]

  # For compatibility with tools that don't support nested references
  all = [ "mkdocforge[test,docs,lint]" ]

[build-system]
requires = [ "setuptools >= 61.0.0" ]
build-backend = "setuptools.build_meta"
# pyproject.toml
# [build-system]
# requires = ["hatchling"]
# build-backend = "hatchling.build"

[tool.setuptools.packages.find]
exclude = [ "base_vm", "tests", "docs", "scripts" ]

# === Rye-Specific Configuration ===
[tool.rye]
managed = true
virtual = true

[tool.commitizen]
name = "cz_gitmoji"

[tool.semantic_release]
assets = [  ]
build_command_env = [  ]
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
repo_dir = "C:\\Users\\MDevPro\\Desktop\\Desktop\\Code\\rye_version\\base_project_structure"
no_git_verify = false
tag_format = "v{version}"

  [tool.semantic_release.branches.main]
  match = "(main|master)"
  prerelease_token = "rc"
  prerelease = false

  [tool.semantic_release.changelog]
  changelog_file = ""
  exclude_commit_patterns = [  ]
  mode = "init"
  insertion_flag = "<!-- version list -->"
  template_dir = "templates"

    [tool.semantic_release.changelog.default_templates]
    changelog_file = "CHANGELOG.md"
    output_format = "md"
    mask_initial_release = false

    [tool.semantic_release.changelog.environment]
    block_start_string = "{%"
    block_end_string = "%}"
    variable_start_string = "{{"
    variable_end_string = "}}"
    comment_start_string = "{#"
    comment_end_string = "#}"
    trim_blocks = false
    lstrip_blocks = false
    newline_sequence = "\n"
    keep_trailing_newline = false
    extensions = [  ]
    autoescape = false

  [tool.semantic_release.commit_author]
  env = "GIT_COMMIT_AUTHOR"
  default = "semantic-release <semantic-release>"

  [tool.semantic_release.commit_parser_options]
  minor_tags = [ "feat" ]
  patch_tags = [ "fix", "perf" ]
  other_allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "style",
    "refactor",
    "test",
  ]
  allowed_tags = [
    "feat",
    "fix",
    "perf",
    "build",
    "chore",
    "ci",
    "docs",
    "style",
    "refactor",
    "test",
  ]
  default_bump_level = 0
  parse_squash_commits = false
  ignore_merge_commits = false

  [tool.semantic_release.remote]
  name = "origin"
  type = "github"
  ignore_token_for_push = false
  insecure = false
  token = { env = "GH_TOKEN" }

  [tool.semantic_release.publish]
  dist_glob_patterns = [ "dist/*" ]
  upload_to_vcs_release = true
