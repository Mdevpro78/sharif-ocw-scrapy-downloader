@startuml Class Diagram

' Dark mode theme settings
!include https://raw.githubusercontent.com/patrik-csak/one-dark-plantuml-theme/v1.0.1/theme.puml

' Override default theme settings for better dark mode
skinparam backgroundColor #282c34
skinparam defaultTextAlignment center
skinparam noteTextAlignment left
skinparam ArrowColor #abb2bf
skinparam NoteBorderColor #61afef
skinparam NoteBackgroundColor #2c323c
skinparam NoteFontColor #abb2bf
skinparam Nodesep 100
skinparam Ranksep 100
skinparam Dpi 96
skinparam PageMargin 150
skinparam BoxPadding 150

skinparam classAttributeIconSize 0
skinparam style uml2

' Core Domain Entities
class URL {
  - id: UUID
  - originalUrl: String
  - shortCode: String
  - creationDate: DateTime
  - expirationDate: DateTime
  - isActive: Boolean
  - userId: UUID
  - clickCount: Integer
  - lastAccessedDate: DateTime
  + getId(): UUID
  + getOriginalUrl(): String
  + getShortCode(): String
  + getCreationDate(): DateTime
  + getExpirationDate(): DateTime
  + isActive(): Boolean
  + getUserId(): UUID
  + getClickCount(): Integer
  + getLastAccessedDate(): DateTime
  + setExpirationDate(date: DateTime): void
  + setActive(active: Boolean): void
  + incrementClickCount(): void
  + updateLastAccessedDate(): void
}

class User {
  - id: UUID
  - username: String
  - email: String
  - passwordHash: String
  - creationDate: DateTime
  - lastLoginDate: DateTime
  - role: UserRole
  - apiKey: String
  - isActive: Boolean
  + getId(): UUID
  + getUsername(): String
  + getEmail(): String
  + getCreationDate(): DateTime
  + getLastLoginDate(): DateTime
  + getRole(): UserRole
  + getApiKey(): String
  + isActive(): Boolean
  + setLastLoginDate(date: DateTime): void
  + setRole(role: UserRole): void
  + regenerateApiKey(): String
  + setActive(active: Boolean): void
  + verifyPassword(password: String): Boolean
}

enum UserRole {
  STANDARD
  PREMIUM
  ADMIN
}

class Analytics {
  - id: UUID
  - urlId: UUID
  - timestamp: DateTime
  - ipAddress: String
  - userAgent: String
  - referrer: String
  - country: String
  - device: String
  - browser: String
  + getId(): UUID
  + getUrlId(): UUID
  + getTimestamp(): DateTime
  + getIpAddress(): String
  + getUserAgent(): String
  + getReferrer(): String
  + getCountry(): String
  + getDevice(): String
  + getBrowser(): String
}

' Service Classes
class URLService {
  - urlRepository: URLRepository
  - cacheService: CacheService
  - idGenerator: IdGenerator
  - analyticsService: AnalyticsService
  - configService: ConfigService
  + createShortUrl(originalUrl: String, userId: UUID, expirationDate: DateTime): URL
  + getOriginalUrl(shortCode: String): String
  + getUrlByShortCode(shortCode: String): URL
  + getUrlsByUser(userId: UUID, page: Integer, size: Integer): List<URL>
  + updateUrl(urlId: UUID, updatedUrl: URL): URL
  + deactivateUrl(urlId: UUID): void
  + bulkCreateUrls(urls: List<String>, userId: UUID): List<URL>
  + isUrlValid(url: String): Boolean
  + generateShortCode(): String
}

class UserService {
  - userRepository: UserRepository
  - passwordEncoder: PasswordEncoder
  - emailService: EmailService
  - configService: ConfigService
  + createUser(user: User): User
  + authenticateUser(username: String, password: String): AuthToken
  + getUserById(userId: UUID): User
  + updateUser(userId: UUID, updatedUser: User): User
  + deactivateUser(userId: UUID): void
  + regenerateApiKey(userId: UUID): String
  + upgradeUserRole(userId: UUID, newRole: UserRole): void
  + validateApiKey(apiKey: String): Boolean
}

class AnalyticsService {
  - analyticsRepository: AnalyticsRepository
  - urlRepository: URLRepository
  - geoLocationService: GeoLocationService
  - userAgentParserService: UserAgentParserService
  - cacheService: CacheService
  + recordClick(shortCode: String, requestInfo: RequestInfo): void
  + getClicksByUrl(urlId: UUID, timeRange: TimeRange): ClickStats
  + getClicksByUser(userId: UUID, timeRange: TimeRange): UserClickStats
  + generateDailyReport(userId: UUID): Report
  + getTopPerformingUrls(userId: UUID, limit: Integer): List<URL>
  + getReferrers(urlId: UUID): Map<String, Integer>
  + getGeographicDistribution(urlId: UUID): Map<String, Integer>
  + getDeviceDistribution(urlId: UUID): Map<String, Integer>
}

' Key Relationships
User "1" -- "0..*" URL : creates >
URL "1" -- "0..*" Analytics : generates >
User "1" *-- "1" UserRole : has >
@enduml
